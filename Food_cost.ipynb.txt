{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "A3IF021TQepZ"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import pandas as pd"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "CgrwS4xTQyry"
      },
      "outputs": [],
      "source": [
        "df_test=pd.read_excel('/content/drive/MyDrive/Restaurant Food Cost/Data_Test.xlsx')\n",
        "df_test"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "Afhn6O7qsUnt"
      },
      "outputs": [],
      "source": [
        "df_train=pd.read_excel('/content/drive/MyDrive/Restaurant Food Cost/Data_Train (1).xlsx')\n",
        "df_train"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "kKlN0dx9vbBF"
      },
      "outputs": [],
      "source": [
        "df = pd.concat([df_train, df_test])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "54n-NxwqvdrL"
      },
      "outputs": [],
      "source": [
        "df"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "jZeSwXuDuNqT"
      },
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "QvkQ3H2ysth0"
      },
      "outputs": [],
      "source": [
        "df_train.isnull().sum()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "hOva9P33SQBw"
      },
      "outputs": [],
      "source": [
        "df['CITY'].nunique()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "uME4MltUwX6e"
      },
      "outputs": [],
      "source": [
        "df['TITLE'].nunique()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "pkZTaA5SwhHT"
      },
      "outputs": [],
      "source": [
        "df['TITLE'].value_counts()>100"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "w6QG9GV8xnLc"
      },
      "outputs": [],
      "source": [
        "df.describe()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "O6Ncp_p9zRCb"
      },
      "outputs": [],
      "source": [
        "df['TITLE'].mode()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "IKIde5di0eNm"
      },
      "outputs": [],
      "source": [
        "df['COST'].fillna(np.nan,inplace=True)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "FZ6d6H741Fm1"
      },
      "outputs": [],
      "source": [
        "df"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "ULzE_oSj-h93"
      },
      "outputs": [],
      "source": [
        "df['RATING'].mode()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "c7zKFz75-z-P"
      },
      "outputs": [],
      "source": [
        "df['VOTES'].mode()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "d8VbSArHF9Lz"
      },
      "outputs": [],
      "source": [
        "df.describe()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "C-PFElXEF_V8"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "jvNsueR89AHT"
      },
      "outputs": [],
      "source": [
        "df_train['VOTES']=df_train['VOTES'].str.replace(' votes','')\n",
        "df_train['RATING']=df_train['RATING'].replace('-','1')\n",
        "df_train['RATING']=df_train['RATING'].replace('NEW','1')\n",
        "df_train['RATING']=df_train['RATING'].replace('','1')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "zWPj7Hj30jBY"
      },
      "outputs": [],
      "source": [
        "df_train['TITLE'].fillna('Not Mentioned',inplace=True)\n",
        "df_train['CITY'].fillna('Not Mentioned',inplace=True)\n",
        "df_train['LOCALITY'].fillna('Not Mentioned',inplace=True)\n",
        "df_train['RATING'].fillna(3.9,inplace=True)\n",
        "df_train['VOTES'].fillna(0.0,inplace=True)\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "xPCZNJM_gvgo"
      },
      "outputs": [],
      "source": [
        "df_train['RATING'] = df_train['RATING'].astype(str)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "3mX9S1coh31P"
      },
      "outputs": [],
      "source": [
        "df_train= df_train[df_train['RATING'] != 'NEW']"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "ZdTRw5sgh8Gi"
      },
      "outputs": [],
      "source": [
        "df_train['RATING'].value_counts()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "vI86DJJOh700"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "IZCC3CDIgLh6"
      },
      "outputs": [],
      "source": [
        "df_train['RATING'] = df_train['RATING'].str.replace('NEW', '1')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "9SdOwZg1f3AF"
      },
      "outputs": [],
      "source": [
        "df['RATING'] = df['RATING'].str.replace('-', '0')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "TSavqFfSgBD7"
      },
      "outputs": [],
      "source": [
        "df_train['RATING'] = df_train['RATING'].astype(float)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "NxqMXYlLBJ8g"
      },
      "outputs": [],
      "source": [
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "bNvrIjorIkSK"
      },
      "outputs": [],
      "source": [
        "df_train['COST']=np.log1p(df_train['COST'])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "PWaya_5-H-3x"
      },
      "outputs": [],
      "source": [
        "df_train.drop(columns=['RESTAURANT_ID'], inplace=True)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "i17a-Ihhi4CF"
      },
      "outputs": [],
      "source": [
        "df_train['VOTES'].astype(int)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "2gB-SWZdZx-0"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "0jaRfjY_ZphI"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "9Py05aTqlFB8"
      },
      "outputs": [],
      "source": [
        "df_train.info()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "hvKujwmwjGTb"
      },
      "outputs": [],
      "source": [
        "from sklearn.preprocessing import LabelEncoder\n",
        "le=LabelEncoder()\n",
        "c=['TITLE','CUISINES','CITY','LOCALITY']"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "Dj8DCpB1Swdl"
      },
      "outputs": [],
      "source": [
        "lecol=[]\n",
        "for col in df_train.columns:\n",
        "    if df[col].dtype == 'O':\n",
        "        lecol.append(col)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "OrlEBtMHS4sB"
      },
      "outputs": [],
      "source": [
        "lecol"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "DlEPGtzPlmAo"
      },
      "outputs": [],
      "source": [
        "from sklearn.preprocessing import LabelEncoder\n",
        "le=LabelEncoder()\n",
        "for i in c:\n",
        "  df_train[i]=le.fit_transform(df_train[i])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "23APfFy9ju8x"
      },
      "outputs": [],
      "source": [
        "df_train"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "RhdMYPI6UsRT"
      },
      "outputs": [],
      "source": [
        "df_train['TIME'].value_counts()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "Nyf66jX5V9SI"
      },
      "outputs": [],
      "source": [
        "df_train"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "Oyx588UoXr8w"
      },
      "outputs": [],
      "source": [
        "df_train['TIME']=le.fit_transform(df_train['TIME'])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "OV6kL3IjPb2q"
      },
      "outputs": [],
      "source": [
        "df_train['VOTES']=df_train['VOTES'].astype(int)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "4wPaMRlN85-O"
      },
      "outputs": [],
      "source": [
        "x=df_train.iloc[:,:-1]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "uSrqWNITJ5y4"
      },
      "outputs": [],
      "source": [
        "y = df_train.iloc[:,-1].astype(int)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "Vo_mRC5PYFvY"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "ySmjpxzGQzJy"
      },
      "outputs": [],
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import confusion_matrix,f1_score,r2_score,roc_auc_score,roc_curve\n",
        "X_train,X_test,y_train,y_test=train_test_split(x,y,test_size=0.20,random_state=42)\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "lr=LogisticRegression()\n",
        "lr.fit(X_train,y_train)\n",
        "pred_lr=lr.predict(X_test)\n",
        "mtrc_lr=confusion_matrix(y_test,pred_lr)\n",
        "f1_lr=f1_score(y_test,pred_lr,average='micro')\n",
        "r2_lr=r2_score(y_test,pred_lr)\n",
        "print(mtrc_lr)\n",
        "print(f1_lr)\n",
        "print(r2_lr)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "e49u_be-bR38"
      },
      "outputs": [],
      "source": [
        "from sklearn.linear_model import LinearRegression,ridge_regression,Ridge\n",
        "from sklearn.metrics import r2_score,confusion_matrix,mean_squared_error,accuracy_score\n",
        "from sklearn.model_selection import cross_val_score,GridSearchCV\n",
        "from sklearn.svm import SVR\n",
        "from sklearn.tree import DecisionTreeRegressor\n",
        "from sklearn.ensemble import RandomForestRegressor\n",
        "from xgboost import XGBRegressor\n",
        "lr=LinearRegression()\n",
        "lr.fit(X_train,y_train)\n",
        "pred=lr.predict(X_test)\n",
        "lemse=mean_squared_error(y_test,pred)\n",
        "lermse=np.sqrt(lemse)\n",
        "r2le=r2_score(y_test,pred)\n",
        "scorele=lr.score(X_train,y_train)\n",
        "bstle=cross_val_score(estimator=lr,X=x,y=y,cv=10).mean()\n",
        "print(bstle.mean())\n",
        "print(r2le)\n",
        "print(lermse)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "hJmsftmwbRr6"
      },
      "outputs": [],
      "source": [
        "maxAcc=0\n",
        "rs=0\n",
        "def clssify(clf,x,y):\n",
        "    x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.25,random_state=100)\n",
        "    clf.fit(x_train,y_train)\n",
        "    pred = clf.predict(x_test)\n",
        "    r2score = r2_score(y_train, clf.predict(x_train))\n",
        "    print(\"r2_score :\",r2score)\n",
        "    cv = cross_val_score(estimator=clf, X=x, y=y, cv=10)\n",
        "    print(\"Cross_val_score :\",cv.mean())\n",
        "    #acc = accuracy_score(y_test, pred)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "yfpuGZ7abRgl"
      },
      "outputs": [],
      "source": [
        "clf=SVR()\n",
        "clssify(clf,x,y)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "sBq9ilovbRXD"
      },
      "outputs": [],
      "source": [
        "clf=XGBRegressor()\n",
        "clssify(clf,x,y)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "5mTiL8h5bROQ"
      },
      "outputs": [],
      "source": [
        "rd=Ridge()\n",
        "x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.25,random_state=41)\n",
        "param_grid={'alpha':[0.001,0.1,1,10]}\n",
        "gridrd=GridSearchCV(rd,param_grid,cv=5)\n",
        "gridrd.fit(x_train,y_train)\n",
        "print(\"Best Score :\",gridrd.best_score_)\n",
        "bstrd=gridrd.best_score_\n",
        "\n",
        "\n",
        "print(\"Best alpha :\",gridrd.best_params_['alpha'])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "gkJBQR-ubRFW"
      },
      "outputs": [],
      "source": [
        "rd=Ridge(10)\n",
        "rd.fit(x_train,y_train)\n",
        "print(rd.coef_)\n",
        "print(\"Score :\",rd.score(x_train,y_train))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "Hr6ozoXjbQ7w"
      },
      "outputs": [],
      "source": [
        "predrd=rd.predict(x_test)\n",
        "rdmse=mean_squared_error(y_test,predrd)\n",
        "rdrmse=np.sqrt(mean_squared_error(y_test,predrd))\n",
        "r2rd=r2_score(y_test,predrd)\n",
        "bstrd=gridrd.best_score_\n",
        "print(mean_squared_error(y_test,predrd))\n",
        "print('Best Score :',gridrd.best_score_)\n",
        "print('mean_squared_error :',np.sqrt(mean_squared_error(y_test,predrd)))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "8n8mhF0-bQyj",
        "outputId": "66f27a79-ecd3-409c-aefd-5d43c5354466"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Best Score : 0.33219044940998427\n",
            "Best kernel : rbf\n"
          ]
        }
      ],
      "source": [
        "sv=SVR()\n",
        "x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.25,random_state=41)\n",
        "param_grid={'kernel':['linear','poly','rbf']}\n",
        "gridsv=GridSearchCV(sv,param_grid,cv=5)\n",
        "gridsv.fit(x_train,y_train)\n",
        "print(\"Best Score :\",gridsv.best_score_)\n",
        "\n",
        "print(\"Best kernel :\",gridsv.best_params_['kernel'])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "T2CnI3jm5GCZ"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "yJEWZTU8bQpb",
        "outputId": "31ebea06-800a-4988-c7bb-8d3385399f7b"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "0.34902614192856196\n",
            "MSE : 0.39717592107281247\n",
            "RMSE : 0.6302189469325818\n"
          ]
        },
        {
          "data": {
            "text/plain": [
              "0.33219044940998427"
            ]
          },
          "execution_count": 50,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "best_model=SVR(kernel='rbf')\n",
        "best_model.fit(x_train,y_train)\n",
        "print(best_model.score(x_train,y_train))\n",
        "pred_y=best_model.predict(x_test)\n",
        "r2sv=r2_score(y_test,pred_y)\n",
        "bstsv=gridsv.best_score_\n",
        "svmse=mean_squared_error(y_test,pred_y)\n",
        "svrmse=np.sqrt(mean_squared_error(y_test,pred_y))\n",
        "print('MSE :',mean_squared_error(y_test,pred_y))\n",
        "print(\"RMSE :\",np.sqrt(mean_squared_error(y_test,pred_y)))\n",
        "bstsv"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "WvwiJRs6bQg1"
      },
      "outputs": [],
      "source": [
        "kernel_list=['linear','rbf','poly']\n",
        "for i in kernel_list:\n",
        "  svr=SVR(kernel=i)\n",
        "  svr.fit(x_train,y_train)\n",
        "  print('Score of ',i,'=',svr.score(x_train,y_train))\n",
        "  predy=svr.predict(x_test)\n",
        "  print('MSE :',mean_squared_error(y_test,predy))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Ydl46vZ8eRPF"
      },
      "outputs": [],
      "source": [
        "from sklearn.preprocessing import StandardScaler"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "t3NzZufUbQYP"
      },
      "outputs": [],
      "source": [
        "rndm=RandomForestRegressor()\n",
        "x_train1,x_test1,y_train1,y_test1=train_test_split(x1,y1,test_size=0.25,random_state=1)\n",
        "params_grid =  { 'n_estimators':range(100,500,100),\n",
        "             'max_depth':range(1,10,5),\n",
        "             'min_samples_split':range(2,5),\n",
        "             'min_samples_leaf':range(1,5),\n",
        "             'criterion': ['squared_error']}\n",
        "x_trains=StandardScaler().fit_transform(x_train1)\n",
        "x_tests=StandardScaler().fit_transform(x_test1)\n",
        "y_trains=StandardScaler().fit_transform(y_train1)\n",
        "y_tests=StandardScaler().fit_transform(y_test1)\n",
        "gridrf=GridSearchCV(rndm,params_grid,cv=5,n_jobs=-1)\n",
        "gridrf.fit(x_trains,y_trains)\n",
        "print(\"Best Score :\",gridrf.best_score_)\n",
        "\n",
        "\n",
        "#print(\"Best kernel :\",grid.best_params_['kernel'])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "QCQlu6pEbQPX"
      },
      "outputs": [],
      "source": [
        "rndm_model=RandomForestRegressor(max_depth=6,min_samples_leaf=4,min_samples_split=2)\n",
        "rndm_model.fit(x_trains,y_trains)\n",
        "print(rndm_model.score(x_trains,y_trains))\n",
        "predy=rndm_model.predict(x_tests)\n",
        "rfmse=mean_squared_error(y_tests,predy)\n",
        "rfrmse=np.sqrt(mean_squared_error(y_tests,predy))\n",
        "r2rf=r2_score(y_tests,predy)\n",
        "bstrf=gridrf.best_score_\n",
        "print(\"MSE :\",mean_squared_error(y_tests,predy))\n",
        "print('RMSE :',np.sqrt(mean_squared_error(y_tests,predy)))\n",
        "bstrf"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "2ACBTxTJbQFU"
      },
      "outputs": [],
      "source": [
        "import warnings\n",
        "warnings.filterwarnings('ignore')\n",
        "dtree=DecisionTreeRegressor()\n",
        "x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.25,random_state=41)\n",
        "param_grids={'max_depth':[None,10,20,30],'min_samples_leaf':[2,5,10],'min_samples_split':[1,2,4]}\n",
        "griddt=GridSearchCV(dtree,param_grids,cv=5)\n",
        "griddt.fit(x_train,y_train)\n",
        "print('Best Score :',griddt.best_score_)\n",
        "print('Best Max Depth :',griddt.best_params_['max_depth'])\n",
        "#print('Best Max Features :',grid.best_params_['max_features'])\n",
        "print('Best Min Sample Leaf :',griddt.best_params_['min_samples_leaf'])\n",
        "print('Best Min Sample Split :',griddt.best_params_['min_samples_split'])\n",
        "#rint(dtree_model.score(x_train,y_train))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ZStbTV8TfBjV"
      },
      "outputs": [],
      "source": [
        "dtree_model=DecisionTreeRegressor(max_depth=None,min_samples_leaf=10,min_samples_split=2)\n",
        "dtree_model.fit(x_train,y_train)\n",
        "print(dtree_model.score(x_train,y_train))\n",
        "predy=dtree_model.predict(x_test)\n",
        "dtmse=mean_squared_error(y_test,predy)\n",
        "dtrmse=np.sqrt(mean_squared_error(y_test,predy))\n",
        "r2dt=r2_score(y_test,predy)\n",
        "bstdt=griddt.best_score_\n",
        "print(\"MSE :\",mean_squared_error(y_test,predy))\n",
        "print('RMSE :',np.sqrt(mean_squared_error(y_test,predy)))\n",
        "bstdt"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "1XisYS8obP9N"
      },
      "outputs": [],
      "source": [
        "models = [('Linear Regression', lermse, lemse, r2le, bstle),\n",
        "          ('Ridge Regression', rdrmse, rdmse, r2rd, bstrd),\n",
        "          ('Support Vector Regression', svrmse, rdmse, r2sv, bstsv),\n",
        "          ('Random Forest Regression', rfrmse, rfmse, r2rf, bstrf),\n",
        "          ('Decision Tree Regression', dtrmse, dtmse, r2dt, bstdt)\n",
        "         ]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "U1sIcd8DbP0d"
      },
      "outputs": [],
      "source": [
        "result=pd.DataFrame(data=models,columns=['Model','RMSE','MSE','r2_score','Best Score'])\n",
        "result"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "pXUp4v2ibPob"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "trIt_1cyewVy"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "zomM9gxrewL1"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "eC4gqDjNewB8"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "h0O1yEBrev2h"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "tD34yUTEevtH"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "RC-Obh-WY1Dp"
      },
      "outputs": [],
      "source": [
        "print(y_train.dtype)\n",
        "print(y_test.dtype)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "oQuNjbn0Wih9"
      },
      "outputs": [],
      "source": [
        "print(X_train.dtypes)\n",
        "print(y_train.dtypes)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "HbhtT_XrcUAN"
      },
      "outputs": [],
      "source": [
        "X_train['QUICK'] = pd.to_numeric(X_train['column_name'])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "NZ84K29vZJEE"
      },
      "outputs": [],
      "source": [
        "print(X_train.dtypes)\n",
        "print(y_train.dtypes)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "EB9vg6poohsZ"
      },
      "outputs": [],
      "source": [
        "\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "\n",
        "# Creating two arrays representing the coordinates of the vertices of the two lines\n",
        "x = np.array([15, 25, 35])\n",
        "y1 = np.array([0.5, 0, 0.5])\n",
        "y2 = np.array([0.5, 1, 0.5])\n",
        "\n",
        "# Plotting the lines\n",
        "plt.plot(x, y1, 'b--')\n",
        "plt.plot(x, y2, 'b--')\n",
        "\n",
        "# Setting labels and title\n",
        "plt.xlabel('X Axis Label')\n",
        "plt.ylabel('Y Axis Label')\n",
        "plt.title('Title')\n",
        "\n",
        "# Displaying grid\n",
        "plt.grid(True)\n",
        "\n",
        "# Showing the plot\n",
        "plt.show()"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}